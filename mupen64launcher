#!/usr/bin/perl -w
use strict;
use warnings;
use v5.10;

use Tk;
use Config::Simple;

my $CONFIG_FILE_PATH = glob("~/.mupen64launcher");

die "Configuration file not found: $CONFIG_FILE_PATH" unless -f $CONFIG_FILE_PATH;

say "Reading configuration from: $CONFIG_FILE_PATH";
tie my %Config, 'Config::Simple', $CONFIG_FILE_PATH;

my $main_window = &create_gui;

Tk::MainLoop;

sub create_gui {
	my $main_window = new Tk::MainWindow;

	&create_main_menu($main_window);
	&create_launcher($main_window);

	return $main_window;
}

sub create_main_menu {
	my $main_window = shift;

	my $main_menu = $main_window->Menu();
	$main_window->configure(-menu => $main_menu);
	$main_window->{main_menu} = $main_menu;

	my $file_menu = $main_menu->Menu(-tearoff => 0);
	$file_menu->add('command', -label => 'Quit',
			-command => sub { $main_window->destroy });
	$main_menu->add('cascade', -label => 'File', -menu => $file_menu);

	my $settings_menu = $main_menu->Menu(-tearoff => 0);
	my $title = $main_window->title;
	$settings_menu->add('command', -label => "Configure", -command => sub { 
		&create_config_window($main_window) 
	});
	$main_menu->add('cascade', -label => 'Edit', -menu => $settings_menu);

	return $main_menu;
}

sub create_config_window {
	my $main_window = shift;

	my %widgets;	# Map of config option to input widget for that option

	my $config_window = $main_window->Toplevel(-title => 'Configure Launcher');
	$config_window->bind('<Destroy>', sub { $main_window->state('normal') });
	$main_window->state('withdraw');


	my $launcher_frame = $config_window->Frame(-relief => 'groove');
	$launcher_frame->Label(-text => 'Launcher')->grid(
		-row => 0, -column => 0, -columnspan => 2, -sticky => 'we'
	);
	$launcher_frame->grid(-row => 0, -column => 0, -sticky => 'w');

	my $plugins_frame = $config_window->Frame(-relief => 'groove');
	$plugins_frame->Label(-text => 'Plugins')->grid(
		-row => 0, -column => 0, -columnspan => 2, -sticky => 'we'
	);
	$plugins_frame->grid(-row => 1, -column => 0, -sticky => 'w');

	my $flags_frame = $config_window->Frame(-relief => 'groove');
	$flags_frame->Label(-text => 'Flags')->grid(
		-row => 0, -column => 0, -columnspan => 2, -sticky => 'we'
	);
	$flags_frame->grid(-row => 2, -column => 0, -sticky => 'w');

	my $options_frame = $config_window->Frame(-relief => 'groove');
	$options_frame->Label(-text => 'Options')->grid(
		-row => 0, -column => 0, -columnspan => 2, -sticky => 'we'
	);
	$options_frame->grid(-row => 3, -column => 0, -sticky => 'w');

	my $launcher_row = my $plugins_row = my $flags_row = my $options_row = 1;

	while (my ($key, $value) = each %Config) {
		my ($target, $full_option) = ($key =~ /(\w+)\.(\w+)/);
		say "1. $target - $full_option";

		if ($target eq 'launcher') {
			$launcher_frame->Label(-text => $full_option)->grid(
				-row => $launcher_row, -column => 0, -sticky => 'e'
			);
			my $entry = $launcher_frame->Entry(-width => 40, -bg => '#ffffff');
			$value = join ', ', $value if ref $value eq 'array';
			$entry->insert('insert', $value);
			$entry->grid(-row => $launcher_row, -column => 1, -sticky => 'w');
			$widgets{$key} = $entry;
			$launcher_row++;
			next;
		}

		my ($option, $option_type) = ($full_option =~ /(\w+)(plugin|flag|option)/);

		say "2. $target - $option - $option_type";

		next unless $target eq 'emulator' && defined $option_type; 
		
		if ($option_type eq 'plugin') {
			$plugins_frame->Label(-text => $option)->grid(
				-row => $plugins_row, -column => 0, -sticky => 'e'
			);
			my $entry = $plugins_frame->Entry(-width => 40, -bg => '#ffffff');
			$entry->insert('insert', $value);
			$entry->grid(-row => $plugins_row, -column => 1, -sticky => 'w');
			$widgets{$key} = $entry;
			$plugins_row++;
		} elsif ($option_type eq 'flag') {
			$flags_frame->Label(-text => $option)->grid(-row => $flags_row,
					-column => 0, -sticky => 'e');
			my $button = $flags_frame->Checkbutton();
			$button->select if $value;
			$button->grid(-row => $flags_row, -column => 1, -sticky => 'w');
			$widgets{$key} = $button;
			$flags_row++;
		} elsif ($option_type eq 'option') {
			$options_frame->Label(-text => $option)->grid(-row => $options_row,
					-column => 0, -sticky => 'e');
			my $entry = $options_frame->Entry(-width => 40, -bg => '#ffffff');
			$entry->insert('insert', $value);
			$entry->grid(-row => $options_row, -column => 1, -sticky => 'w');
			$widgets{$key} = $entry;
			$options_row++;
		} else {
			say STDERR "Invalid emulator configuration option: $key = $value";
		}
	}

	my $button_frame = $config_window->Frame(-relief => 'sunken');
	$button_frame->grid(-row => 4, -column => 0);

	$button_frame->Button(-text => 'Save', -command => sub {
		foreach my $key (keys %Config) {
			my $widget = $widgets{$key};
			my $class = ref $widget;
			if ($class eq 'Tk::Checkbutton') {
				$Config{$key} = $widget->{Value};
			} elsif ($class eq 'Tk::Entry') {
				$Config{$key} = $widget->get();
			} else {
				say STDERR "WTF: Widget $class not known!";
			}
		}
		tied(%Config)->save();
		$config_window->destroy;
	})->grid(-row => 0, -column => 0, -sticky => 'e');

	$button_frame->Button(-text => 'Cancel', -command => sub {
		$config_window->destroy
	})->grid(-row => 0, -column => 1, -sticky => 'w');

	return $config_window;
}

sub create_launcher {
	my $main_window = shift;

	my $launcher = $main_window->Scrolled(
		'Text', -scrollbars => 'ose',
		-bg => '#ffffff', -height => '32', -width => '80',
		-font => 'Monospace 10 normal', -fg => "#ff0000",
		-relief => 'sunken', -state => 'disabled'
	);
	$launcher->pack(-fill => 'both');
	$main_window->{launcher} = $launcher;
	&update_launcher($launcher);
	return $launcher;
}

sub update_launcher {
	my $launcher = shift;
	my $rom_path = glob $Config{'launcher.rompath'};
	say "Searching for ROMS in: $rom_path";
	my @games = sort &find_roms($rom_path);

	$launcher->configure(-state => 'normal');
	$launcher->delete('1.0', 'end');
	foreach my $game (@games) {
		$launcher->insert('insert', "$game\n", [$game]);
		$launcher->tagBind($game, '<1>', sub { &run_game($game) });
	}
	$launcher->configure(-state => 'disabled');
}

sub find_roms {
	my $dir_name = shift;

	my $rom_exts = $Config{'launcher.romexts'};
	my @rom_exts = ref($rom_exts) eq 'ARRAY' ? @$rom_exts : split /\s+/, $rom_exts;
	my $dir_ext_re = "(" . (join '|', @rom_exts) . ")";

	my @dir_entries;

	opendir my $dir_h, $dir_name or die "Could not open $dir_name for reading";

	while (my $ent = readdir $dir_h) {
		if ( -f "$dir_name/$ent" && $ent =~ /.*\.$dir_ext_re$/) {
			say "Found ROM: $ent";
			push @dir_entries, $ent;
		}
	}

	closedir $dir_h;

	return @dir_entries;
}

sub run_game {
	my @cmdline = @{&build_cmdline(shift)};

	my $pid = fork();
	if ($pid == 0) {
		say 'Executing ' . join ' ', @cmdline;
		exec @cmdline;
	}
	# TODO: else Store the pid somewhere
}

sub build_cmdline {
	my ($rom, %kwargs) = @_;
	my @cmdline;

	push @cmdline, glob $Config{'launcher.emupath'};

	my $plugin_path = glob $Config{'launcher.pluginpath'};

	while (my ($key, $value) = each %Config) {
		my ($target, $full_option) = ($key =~ /(\w+)\.(\w+)/);

		next unless $target eq 'emulator';

		my ($option, $option_type) = ($full_option =~ /(\w+)(plugin|flag|option)/);

		if ($option_type eq 'flag') {
			push @cmdline, "--$option" if $value;
		} elsif ($option_type eq 'plugin') {
			say "build_cmdline: Pushing plugin: $option = $value";
			push @cmdline, "--$option", "$plugin_path/$value";
		} elsif ($option_type eq 'option') {
			say "build_cmdline: Pushing option: $option = $value";
			push @cmdline, "--$option", $value;
		} else {
			say STDERR "WTF! What do you have in emulator_config: $key = $value";
		}
	}

	unless ($kwargs{abs_rompath}) {
		my $rompath = glob $Config{'launcher.rompath'};
		push @cmdline, "$rompath/$rom";
	} else {
		push @cmdline, $rom;
	}

	return \@cmdline;
}
